/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  type GetPingResponce,
  GetPingResponceFromJSON,
  GetPingResponceToJSON,
  type HTTPValidationError,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models";

export interface GetPingRequest {
  iserror?: number;
}

export interface ReadItemItemsItemIdGetRequest {
  itemId: number;
  q?: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Get Ping
   */
  async getPingRaw(
    requestParameters: GetPingRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<GetPingResponce>> {
    const queryParameters: any = {};

    if (requestParameters.iserror !== undefined) {
      queryParameters["iserror"] = requestParameters.iserror;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/ping`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetPingResponceFromJSON(jsonValue),
    );
  }

  /**
   * Get Ping
   */
  async getPing(
    requestParameters: GetPingRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<GetPingResponce> {
    const response = await this.getPingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read Item
   */
  async readItemItemsItemIdGetRaw(
    requestParameters: ReadItemItemsItemIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.itemId === null ||
      requestParameters.itemId === undefined
    ) {
      throw new runtime.RequiredError(
        "itemId",
        "Required parameter requestParameters.itemId was null or undefined when calling readItemItemsItemIdGet.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.q !== undefined) {
      queryParameters["q"] = requestParameters.q;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/items/{item_id}`.replace(
          `{${"item_id"}}`,
          encodeURIComponent(String(requestParameters.itemId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Read Item
   */
  async readItemItemsItemIdGet(
    requestParameters: ReadItemItemsItemIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<any> {
    const response = await this.readItemItemsItemIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
