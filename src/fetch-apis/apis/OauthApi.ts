/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  type GetMeResponseFromTraq,
  GetMeResponseFromTraqFromJSON,
  GetMeResponseFromTraqToJSON,
  type GetOAuthRedirectResponse,
  GetOAuthRedirectResponseFromJSON,
  GetOAuthRedirectResponseToJSON,
  type HTTPValidationError,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models";

export interface GetOauthCallbackRequest {
  code: string;
}

/**
 *
 */
export class OauthApi extends runtime.BaseAPI {
  /**
   * 認証画面を通過して得たcodeを用いてアクセストークンを得る
   * Get Oauth Callback
   */
  async getOauthCallbackRaw(
    requestParameters: GetOauthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.code === null ||
      requestParameters.code === undefined
    ) {
      throw new runtime.RequiredError(
        "code",
        "Required parameter requestParameters.code was null or undefined when calling getOauthCallback.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.code !== undefined) {
      queryParameters["code"] = requestParameters.code;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/oauth/callback`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 認証画面を通過して得たcodeを用いてアクセストークンを得る
   * Get Oauth Callback
   */
  async getOauthCallback(
    requestParameters: GetOauthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getOauthCallbackRaw(requestParameters, initOverrides);
  }

  /**
   * 認証が通らなかったら401が帰ってくる...はず
   * Get Oauth Me
   */
  async getOauthMeRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<GetMeResponseFromTraq>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/oauth/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetMeResponseFromTraqFromJSON(jsonValue),
    );
  }

  /**
   * 認証が通らなかったら401が帰ってくる...はず
   * Get Oauth Me
   */
  async getOauthMe(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<GetMeResponseFromTraq> {
    const response = await this.getOauthMeRaw(initOverrides);
    return await response.value();
  }

  /**
   * 認証画面へリダイレクトするためのリダイレクト先のurlを返すAPI． このAPIを叩くとセッションが作られる
   * Get Oauth Redirect
   */
  async getOauthRedirectUriRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<GetOAuthRedirectResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/oauth/redirect-uri`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOAuthRedirectResponseFromJSON(jsonValue),
    );
  }

  /**
   * 認証画面へリダイレクトするためのリダイレクト先のurlを返すAPI． このAPIを叩くとセッションが作られる
   * Get Oauth Redirect
   */
  async getOauthRedirectUri(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<GetOAuthRedirectResponse> {
    const response = await this.getOauthRedirectUriRaw(initOverrides);
    return await response.value();
  }
}
