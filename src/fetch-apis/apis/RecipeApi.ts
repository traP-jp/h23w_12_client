/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  type GetRecipeResponce,
  GetRecipeResponceFromJSON,
  GetRecipeResponceToJSON,
  type HTTPValidationError,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  type UserInput,
  UserInputFromJSON,
  UserInputToJSON,
} from "../models";

export interface GetRecipeRequest {
  recipeId: number;
}

export interface PostRecipeRequest {
  body: object;
}

export interface PostRecipeGenTextRequest {
  userInput: UserInput;
}

/**
 *
 */
export class RecipeApi extends runtime.BaseAPI {
  /**
   * Read Recipe
   */
  async getRecipeRaw(
    requestParameters: GetRecipeRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<GetRecipeResponce>> {
    if (
      requestParameters.recipeId === null ||
      requestParameters.recipeId === undefined
    ) {
      throw new runtime.RequiredError(
        "recipeId",
        "Required parameter requestParameters.recipeId was null or undefined when calling getRecipe.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/recipe/{recipe_id}`.replace(
          `{${"recipe_id"}}`,
          encodeURIComponent(String(requestParameters.recipeId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetRecipeResponceFromJSON(jsonValue),
    );
  }

  /**
   * Read Recipe
   */
  async getRecipe(
    requestParameters: GetRecipeRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<GetRecipeResponce> {
    const response = await this.getRecipeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read All Recipes
   */
  async getRecipesRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/recipes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Read All Recipes
   */
  async getRecipes(
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<any> {
    const response = await this.getRecipesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create Recipe
   */
  async postRecipeRaw(
    requestParameters: PostRecipeRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling postRecipe.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/add_recipe`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Create Recipe
   */
  async postRecipe(
    requestParameters: PostRecipeRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<any> {
    const response = await this.postRecipeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Process Text
   */
  async postRecipeGenTextRaw(
    requestParameters: PostRecipeGenTextRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.userInput === null ||
      requestParameters.userInput === undefined
    ) {
      throw new runtime.RequiredError(
        "userInput",
        "Required parameter requestParameters.userInput was null or undefined when calling postRecipeGenText.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/process-text`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserInputToJSON(requestParameters.userInput),
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Process Text
   */
  async postRecipeGenText(
    requestParameters: PostRecipeGenTextRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<any> {
    const response = await this.postRecipeGenTextRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
